From 53d50b53f83aa5135ff5092d0d566424024b8b4b Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <vladimir.dvorak@jetbrains.com>
Date: Sun, 4 Oct 2020 21:12:12 +0200
Subject: [PATCH 04/39] Support for Lambda class redefinition

---
 .../share/classfile/classLoaderData.cpp       |  9 +++
 .../share/classfile/classLoaderData.hpp       |  2 +-
 .../share/classfile/systemDictionary.cpp      | 10 ++-
 .../prims/jvmtiEnhancedRedefineClasses.cpp    | 65 +++++++++++++++++--
 .../prims/jvmtiEnhancedRedefineClasses.hpp    |  1 +
 .../share/prims/resolvedMethodTable.cpp       |  2 +
 6 files changed, 80 insertions(+), 9 deletions(-)

diff --git a/src/hotspot/share/classfile/classLoaderData.cpp b/src/hotspot/share/classfile/classLoaderData.cpp
index 340ffadf837..db50b3edee8 100644
--- a/src/hotspot/share/classfile/classLoaderData.cpp
+++ b/src/hotspot/share/classfile/classLoaderData.cpp
@@ -599,6 +599,15 @@ Dictionary* ClassLoaderData::create_dictionary() {
   return new Dictionary(this, size, resizable);
 }
 
+void ClassLoaderData::exchange_holders(ClassLoaderData* cld) {
+  oop holder_oop = _holder.peek();
+  _holder.replace(cld->_holder.peek());
+  cld->_holder.replace(holder_oop);
+  WeakHandle<vm_class_loader_data> exchange = _holder;
+  _holder = cld->_holder;
+  cld->_holder = exchange;
+}
+
 // Tell the GC to keep this klass alive while iterating ClassLoaderDataGraph
 oop ClassLoaderData::holder_phantom() const {
   // A klass that was previously considered dead can be looked up in the
diff --git a/src/hotspot/share/classfile/classLoaderData.hpp b/src/hotspot/share/classfile/classLoaderData.hpp
index 5a81ab90ca3..bda39f3e353 100644
--- a/src/hotspot/share/classfile/classLoaderData.hpp
+++ b/src/hotspot/share/classfile/classLoaderData.hpp
@@ -175,7 +175,7 @@ class ClassLoaderData : public CHeapObj<mtClass> {
 
   oop holder_no_keepalive() const;
   oop holder_phantom() const;
-
+  void exchange_holders(ClassLoaderData* cld);
  private:
   void unload();
   bool keep_alive() const       { return _keep_alive > 0; }
diff --git a/src/hotspot/share/classfile/systemDictionary.cpp b/src/hotspot/share/classfile/systemDictionary.cpp
index 2bfd9cb802f..cea614a574f 100644
--- a/src/hotspot/share/classfile/systemDictionary.cpp
+++ b/src/hotspot/share/classfile/systemDictionary.cpp
@@ -825,10 +825,14 @@ InstanceKlass* SystemDictionary::resolve_hidden_class_from_stream(
                                                      Symbol* class_name,
                                                      Handle class_loader,
                                                      const ClassLoadInfo& cl_info,
+                                                     InstanceKlass* old_klass,
                                                      TRAPS) {
 
   EventClassLoad class_load_start_event;
   ClassLoaderData* loader_data;
+ 
+  bool is_redefining = (old_klass != NULL);
+  
 
   // - for hidden classes that are not strong: create a new CLD that has a class holder and
   //                                           whose loader is the Lookup class's loader.
@@ -845,9 +849,13 @@ InstanceKlass* SystemDictionary::resolve_hidden_class_from_stream(
                                                       class_name,
                                                       loader_data,
                                                       cl_info,
-                                                      false, // pick_newest
+                                                      is_redefining, // pick_newest
                                                       CHECK_NULL);
   assert(k != NULL, "no klass created");
+  if (is_redefining && k != NULL) {
+    k->set_redefining(true);
+    k->set_old_version(old_klass);
+  }
 
   // Hidden classes that are not strong must update ClassLoaderData holder
   // so that they can be unloaded when the mirror is no longer referenced.
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index 5551d3ca123..bf31819479d 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -492,6 +492,8 @@ void VM_EnhancedRedefineClasses::doit() {
     ClassLoaderDataGraph::classes_do(&clear_cpool_cache);
 
 
+    // SystemDictionary::methods_do(fix_invoke_method);
+
   // JSR-292 support
   if (_any_class_has_resolved_methods) {
     bool trace_name_printed = false;
@@ -754,12 +756,34 @@ jvmtiError VM_EnhancedRedefineClasses::load_new_class_versions(TRAPS) {
     // load hook event.
     state->set_class_being_redefined(the_class, _class_load_kind);
 
-    InstanceKlass* k = SystemDictionary::resolve_from_stream(the_class_sym,
-                                                the_class_loader,
-                                                protection_domain,
-                                                &st,
-                                                the_class,
-                                                THREAD);
+    InstanceKlass* k;
+
+    if (InstanceKlass::cast(the_class)->is_anonymous()) {
+      const InstanceKlass* host_class = the_class->host_klass();
+
+      // Make sure it's the real host class, not another anonymous class.
+      while (host_class != NULL && host_class->is_anonymous()) {
+        host_class = host_class->host_klass();
+      }
+
+      k = SystemDictionary::parse_stream(the_class_sym,
+                                         the_class_loader,
+                                         protection_domain,
+                                         &st,
+                                         host_class,
+                                         the_class,
+                                         NULL,
+                                         THREAD);
+      k->class_loader_data()->exchange_holders(the_class->class_loader_data());
+      the_class->class_loader_data()->inc_keep_alive();
+    } else {
+      k = SystemDictionary::resolve_from_stream(the_class_sym,
+                                                  the_class_loader,
+                                                  protection_domain,
+                                                  &st,
+                                                  the_class,
+                                                  THREAD);
+    }
     // Clear class_being_redefined just to be sure.
     state->clear_class_being_redefined();
 
@@ -1440,6 +1464,30 @@ void VM_EnhancedRedefineClasses::MethodDataCleaner::do_klass(Klass* k) {
   }
 }
 
+void VM_EnhancedRedefineClasses::fix_invoke_method(Method* method) {
+
+  constantPoolHandle other_cp = constantPoolHandle(method->constants());
+
+  for (int i = 0; i < other_cp->length(); i++) {
+    if (other_cp->tag_at(i).is_klass()) {
+      Klass* klass = other_cp->resolved_klass_at(i);
+      if (klass->new_version() != NULL) {
+        // Constant pool entry points to redefined class -- update to the new version
+        other_cp->klass_at_put(i, klass->newest_version());
+      }
+      assert(other_cp->resolved_klass_at(i)->new_version() == NULL, "Must be new klass!");
+    }
+  }
+
+  ConstantPoolCache* cp_cache = other_cp->cache();
+  if (cp_cache != NULL) {
+    cp_cache->clear_entries();
+  }
+
+}
+
+
+
 void VM_EnhancedRedefineClasses::update_jmethod_ids() {
   for (int j = 0; j < _matching_methods_length; ++j) {
     Method* old_method = _matching_old_methods[j];
@@ -1977,7 +2025,10 @@ jvmtiError VM_EnhancedRedefineClasses::find_sorted_affected_classes(TRAPS) {
   // Find classes not directly redefined, but affected by a redefinition (because one of its supertypes is redefined)
   AffectedKlassClosure closure(_affected_klasses);
   // Updated in j10, from original SystemDictionary::classes_do
-  ClassLoaderDataGraph::dictionary_classes_do(&closure);
+
+  ClassLoaderDataGraph::classes_do(&closure);
+  //ClassLoaderDataGraph::dictionary_classes_do(&closure);
+
   log_trace(redefine, class, load)("%d classes affected", _affected_klasses->length());
 
   // Sort the affected klasses such that a supertype is always on a smaller array index than its subtype.
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
index 60b62c3170a..d8a11b51fe9 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
@@ -116,6 +116,7 @@ class VM_EnhancedRedefineClasses: public VM_GC_Operation {
   void rollback();
   static void mark_as_scavengable(nmethod* nm);
   static void unpatch_bytecode(Method* method);
+  static void fix_invoke_method(Method* method);
 
   // Figure out which new methods match old methods in name and signature,
   // which methods have been added, and which are no longer present
diff --git a/src/hotspot/share/prims/resolvedMethodTable.cpp b/src/hotspot/share/prims/resolvedMethodTable.cpp
index 6a8128e844f..8644937dbbb 100644
--- a/src/hotspot/share/prims/resolvedMethodTable.cpp
+++ b/src/hotspot/share/prims/resolvedMethodTable.cpp
@@ -409,6 +409,8 @@ void ResolvedMethodTable::adjust_method_entries_dcevm(bool * trace_name_printed)
         InstanceKlass* newer_klass = InstanceKlass::cast(old_method->method_holder()->new_version());
         Method* newer_method = newer_klass->method_with_idnum(old_method->orig_method_idnum());
 
+        log_info(redefine, class, load, exceptions)("Adjusting method: '%s' of new class %s", newer_method->name_and_sig_as_C_string(), newer_klass->name()->as_C_string());
+
         assert(newer_klass == newer_method->method_holder(), "call after swapping redefined guts");
         assert(newer_method != NULL, "method_with_idnum() should not be NULL");
         assert(old_method != newer_method, "sanity check");
-- 
2.23.0

