From c40cd307310822e6e60c61931c14f97a8501f975 Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <vladimir.dvorak@jetbrains.com>
Date: Sun, 24 May 2020 12:07:42 +0200
Subject: [PATCH 06/39] Replace deleted method with
 Universe::throw_no_such_method_error

+ Change log level in advanced redefinition
- Change log level for "Comparing different class ver.." to debug
- Fix adjust_method_entries_dcevm logging levels and severity
---
 .../prims/jvmtiEnhancedRedefineClasses.cpp    |  2 +-
 .../share/prims/resolvedMethodTable.cpp       | 30 +++++++++----------
 2 files changed, 16 insertions(+), 16 deletions(-)

diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index 07935bd0ada..3c86e8c68ac 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -881,7 +881,7 @@ jvmtiError VM_EnhancedRedefineClasses::load_new_class_versions(TRAPS) {
  // Calculated the difference between new and old class  (field change, method change, supertype change, ...).
 int VM_EnhancedRedefineClasses::calculate_redefinition_flags(InstanceKlass* new_class) {
   int result = Klass::NoRedefinition;
-  log_info(redefine, class, load)("Comparing different class versions of class %s",new_class->name()->as_C_string());
+  log_debug(redefine, class, load)("Comparing different class versions of class %s",new_class->name()->as_C_string());
 
   assert(new_class->old_version() != NULL, "must have old version");
   InstanceKlass* the_class = InstanceKlass::cast(new_class->old_version());
diff --git a/src/hotspot/share/prims/resolvedMethodTable.cpp b/src/hotspot/share/prims/resolvedMethodTable.cpp
index 8644937dbbb..b8d039adff6 100644
--- a/src/hotspot/share/prims/resolvedMethodTable.cpp
+++ b/src/hotspot/share/prims/resolvedMethodTable.cpp
@@ -399,25 +399,25 @@ void ResolvedMethodTable::adjust_method_entries_dcevm(bool * trace_name_printed)
 
       if (old_method->is_old()) {
 
+        InstanceKlass* newer_klass = InstanceKlass::cast(old_method->method_holder()->new_version());
+        Method* newer_method;
+
         // Method* new_method;
         if (old_method->is_deleted()) {
-          // FIXME:(DCEVM) - check if exception can be thrown
-          // new_method = Universe::throw_no_such_method_error();
-          continue;
-        }
-
-        InstanceKlass* newer_klass = InstanceKlass::cast(old_method->method_holder()->new_version());
-        Method* newer_method = newer_klass->method_with_idnum(old_method->orig_method_idnum());
+          newer_method = Universe::throw_no_such_method_error();
+        } else {
+          newer_method = newer_klass->method_with_idnum(old_method->orig_method_idnum());
 
-        log_info(redefine, class, load, exceptions)("Adjusting method: '%s' of new class %s", newer_method->name_and_sig_as_C_string(), newer_klass->name()->as_C_string());
+          log_debug(redefine, class, update)("Adjusting method: '%s' of new class %s", newer_method->name_and_sig_as_C_string(), newer_klass->name()->as_C_string());
 
-        assert(newer_klass == newer_method->method_holder(), "call after swapping redefined guts");
-        assert(newer_method != NULL, "method_with_idnum() should not be NULL");
-        assert(old_method != newer_method, "sanity check");
+          assert(newer_klass == newer_method->method_holder(), "call after swapping redefined guts");
+          assert(newer_method != NULL, "method_with_idnum() should not be NULL");
+          assert(old_method != newer_method, "sanity check");
 
-        if (_the_table->lookup(newer_method) != NULL) {
-          // old method was already adjusted if new method exists in _the_table
-            continue;
+          if (_the_table->lookup(newer_method) != NULL) {
+            // old method was already adjusted if new method exists in _the_table
+              continue;
+          }
         }
 
         java_lang_invoke_ResolvedMethodName::set_vmtarget(mem_name, newer_method);
@@ -428,7 +428,7 @@ void ResolvedMethodTable::adjust_method_entries_dcevm(bool * trace_name_printed)
 
         ResourceMark rm;
         if (!(*trace_name_printed)) {
-          log_info(redefine, class, update)("adjust: name=%s", old_method->method_holder()->external_name());
+          log_debug(redefine, class, update)("adjust: name=%s", old_method->method_holder()->external_name());
            *trace_name_printed = true;
         }
         log_debug(redefine, class, update, constantpool)
-- 
2.23.0

