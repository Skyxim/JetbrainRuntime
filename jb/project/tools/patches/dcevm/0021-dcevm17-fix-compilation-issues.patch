From e560b33cdec3ef0e4ce91714663d3befa87ff4e5 Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <vladimir.dvorak@jetbrains.com>
Date: Fri, 12 Feb 2021 09:44:28 +0100
Subject: [PATCH 21/39] dcevm17 - fix compilation issues

---
 .../share/classfile/classLoaderData.cpp       |   2 +-
 src/hotspot/share/classfile/javaClasses.cpp   |   4 +-
 src/hotspot/share/classfile/javaClasses.hpp   |   4 +-
 .../share/classfile/lambdaFormInvokers.cpp    | 152 ++++++++++++++++++
 .../share/classfile/systemDictionary.cpp      |   5 +-
 .../share/classfile/systemDictionary.hpp      |   6 +
 src/hotspot/share/classfile/vmClassMacros.hpp |   2 +
 .../share/gc/g1/g1FullGCCompactTask.cpp       |   9 +-
 .../share/gc/g1/g1FullGCCompactionPoint.cpp   |  12 +-
 src/hotspot/share/gc/shared/dcevmSharedGC.cpp |   2 +-
 src/hotspot/share/gc/shared/space.inline.hpp  |   2 +-
 src/hotspot/share/memory/universe.cpp         |  71 --------
 src/hotspot/share/memory/universe.hpp         |   7 -
 src/hotspot/share/oops/instanceKlass.cpp      |   4 +-
 .../prims/jvmtiEnhancedRedefineClasses.cpp    |  47 ++++--
 .../prims/jvmtiEnhancedRedefineClasses.hpp    |   2 +
 .../share/prims/resolvedMethodTable.cpp       |   5 +-
 src/hotspot/share/runtime/arguments.hpp       |   2 +
 18 files changed, 221 insertions(+), 117 deletions(-)
 create mode 100644 src/hotspot/share/classfile/lambdaFormInvokers.cpp

diff --git a/src/hotspot/share/classfile/classLoaderData.cpp b/src/hotspot/share/classfile/classLoaderData.cpp
index 2a826ff50a7..65ce4c4af8c 100644
--- a/src/hotspot/share/classfile/classLoaderData.cpp
+++ b/src/hotspot/share/classfile/classLoaderData.cpp
@@ -603,7 +603,7 @@ void ClassLoaderData::exchange_holders(ClassLoaderData* cld) {
   oop holder_oop = _holder.peek();
   _holder.replace(cld->_holder.peek());
   cld->_holder.replace(holder_oop);
-  WeakHandle<vm_weak_data> exchange = _holder;
+  WeakHandle exchange = _holder;
   _holder = cld->_holder;
   cld->_holder = exchange;
 }
diff --git a/src/hotspot/share/classfile/javaClasses.cpp b/src/hotspot/share/classfile/javaClasses.cpp
index dc800debea4..66ff72b2f02 100644
--- a/src/hotspot/share/classfile/javaClasses.cpp
+++ b/src/hotspot/share/classfile/javaClasses.cpp
@@ -3827,7 +3827,7 @@ void java_lang_invoke_DirectMethodHandle_StaticAccessor::set_static_offset(oop d
   macro(_static_offset_offset, k, vmSymbols::static_offset_name(), long_signature, false)
 
 void java_lang_invoke_DirectMethodHandle_StaticAccessor::compute_offsets() {
-  InstanceKlass* k = SystemDictionary::DirectMethodHandle_StaticAccessor_klass();
+  InstanceKlass* k = vmClasses::DirectMethodHandle_StaticAccessor_klass();
   DIRECTMETHODHANDLE_STATIC_ACCESSOR_FIELDS_DO(FIELD_COMPUTE_OFFSET);
 }
 
@@ -3855,7 +3855,7 @@ void java_lang_invoke_DirectMethodHandle_Accessor::set_field_offset(oop dmh, int
   macro(_field_offset_offset, k, vmSymbols::field_offset_name(), int_signature, false)
 
 void java_lang_invoke_DirectMethodHandle_Accessor::compute_offsets() {
-  InstanceKlass* k = SystemDictionary::DirectMethodHandle_Accessor_klass();
+  InstanceKlass* k = vmClasses::DirectMethodHandle_Accessor_klass();
   DIRECTMETHODHANDLE_ACCESSOR_FIELDS_DO(FIELD_COMPUTE_OFFSET);
 }
 
diff --git a/src/hotspot/share/classfile/javaClasses.hpp b/src/hotspot/share/classfile/javaClasses.hpp
index 32348c90ef9..f7dc5ccbd8c 100644
--- a/src/hotspot/share/classfile/javaClasses.hpp
+++ b/src/hotspot/share/classfile/javaClasses.hpp
@@ -1029,7 +1029,7 @@ class java_lang_invoke_DirectMethodHandle_StaticAccessor: AllStatic {
 
   // Testers
   static bool is_subclass(Klass* klass) {
-    return klass->is_subclass_of(SystemDictionary::DirectMethodHandle_StaticAccessor_klass());
+    return klass->is_subclass_of(vmClasses::DirectMethodHandle_StaticAccessor_klass());
   }
   static bool is_instance(oop obj);
 
@@ -1053,7 +1053,7 @@ class java_lang_invoke_DirectMethodHandle_Accessor: AllStatic {
 
   // Testers
   static bool is_subclass(Klass* klass) {
-    return klass->is_subclass_of(SystemDictionary::DirectMethodHandle_Accessor_klass());
+    return klass->is_subclass_of(vmClasses::DirectMethodHandle_Accessor_klass());
   }
   static bool is_instance(oop obj);
 
diff --git a/src/hotspot/share/classfile/lambdaFormInvokers.cpp b/src/hotspot/share/classfile/lambdaFormInvokers.cpp
new file mode 100644
index 00000000000..281de58b482
--- /dev/null
+++ b/src/hotspot/share/classfile/lambdaFormInvokers.cpp
@@ -0,0 +1,152 @@
+/*
+ * Copyright (c) 2020, 2021, Oracle and/or its affiliates. All rights reserved.
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * This code is free software; you can redistribute it and/or modify it
+ * under the terms of the GNU General Public License version 2 only, as
+ * published by the Free Software Foundation.
+ *
+ * This code is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
+ * version 2 for more details (a copy is included in the LICENSE file that
+ * accompanied this code).
+ *
+ * You should have received a copy of the GNU General Public License version
+ * 2 along with this work; if not, write to the Free Software Foundation,
+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
+ * or visit www.oracle.com if you need additional information or have any
+ * questions.
+ *
+ */
+
+#include "precompiled.hpp"
+#include "classfile/classLoadInfo.hpp"
+#include "classfile/classFileStream.hpp"
+#include "classfile/javaClasses.inline.hpp"
+#include "classfile/klassFactory.hpp"
+#include "classfile/lambdaFormInvokers.hpp"
+#include "classfile/symbolTable.hpp"
+#include "classfile/systemDictionary.hpp"
+#include "classfile/systemDictionaryShared.hpp"
+#include "classfile/vmClasses.hpp"
+#include "classfile/vmSymbols.hpp"
+#include "logging/log.hpp"
+#include "memory/oopFactory.hpp"
+#include "memory/metaspaceShared.hpp"
+#include "memory/resourceArea.hpp"
+#include "oops/instanceKlass.hpp"
+#include "oops/klass.hpp"
+#include "oops/objArrayKlass.hpp"
+#include "oops/objArrayOop.hpp"
+#include "oops/oop.inline.hpp"
+#include "oops/typeArrayOop.inline.hpp"
+#include "runtime/handles.inline.hpp"
+#include "runtime/javaCalls.hpp"
+
+GrowableArray<char*>* LambdaFormInvokers::_lambdaform_lines = NULL;
+
+void LambdaFormInvokers::append(char* line) {
+  if (_lambdaform_lines == NULL) {
+    _lambdaform_lines = new GrowableArray<char*>(100);
+  }
+  _lambdaform_lines->append(line);
+}
+
+void LambdaFormInvokers::regenerate_holder_classes(TRAPS) {
+  assert(_lambdaform_lines != NULL, "Bad List");
+  ResourceMark rm(THREAD);
+
+  Symbol* cds_name  = vmSymbols::jdk_internal_misc_CDS();
+  Klass*  cds_klass = SystemDictionary::resolve_or_null(cds_name, THREAD);
+  guarantee(cds_klass != NULL, "jdk/internal/misc/CDS must exist!");
+
+  int len = _lambdaform_lines->length();
+  objArrayHandle list_lines = oopFactory::new_objArray_handle(vmClasses::String_klass(), len, CHECK);
+  for (int i = 0; i < len; i++) {
+    Handle h_line = java_lang_String::create_from_str(_lambdaform_lines->at(i), CHECK);
+    list_lines->obj_at_put(i, h_line());
+  }
+
+  //
+  // Object[] CDS.generateLambdaFormHolderClasses(String[] lines)
+  // the returned Object[] layout:
+  //   name, byte[], name, byte[] ....
+  Symbol* method = vmSymbols::generateLambdaFormHolderClasses();
+  Symbol* signrs = vmSymbols::generateLambdaFormHolderClasses_signature();
+
+  JavaValue result(T_OBJECT);
+  JavaCalls::call_static(&result, cds_klass, method, signrs, list_lines, THREAD);
+
+  if (HAS_PENDING_EXCEPTION) {
+    log_info(cds)("%s: %s", THREAD->pending_exception()->klass()->external_name(),
+                            java_lang_String::as_utf8_string(java_lang_Throwable::message(THREAD->pending_exception())));
+    CLEAR_PENDING_EXCEPTION;
+    return;
+  }
+
+  objArrayHandle h_array(THREAD, (objArrayOop)result.get_oop());
+  int sz = h_array->length();
+  assert(sz % 2 == 0 && sz >= 2, "Must be even size of length");
+  for (int i = 0; i < sz; i+= 2) {
+    Handle h_name(THREAD, h_array->obj_at(i));
+    typeArrayHandle h_bytes(THREAD, (typeArrayOop)h_array->obj_at(i+1));
+    assert(h_name != NULL, "Class name is NULL");
+    assert(h_bytes != NULL, "Class bytes is NULL");
+
+    char *class_name = java_lang_String::as_utf8_string(h_name());
+    int len = h_bytes->length();
+    // make a copy of class bytes so GC will not affect us.
+    char *buf = resource_allocate_bytes(THREAD, len);
+    memcpy(buf, (char*)h_bytes->byte_at_addr(0), len);
+    ClassFileStream st((u1*)buf, len, NULL, ClassFileStream::verify);
+
+    reload_class(class_name, st, THREAD);
+    // free buf
+    resource_free_bytes(buf, len);
+
+    if (HAS_PENDING_EXCEPTION) {
+      log_info(cds)("Exception happened: %s", PENDING_EXCEPTION->klass()->name()->as_C_string());
+      log_info(cds)("Could not create InstanceKlass for class %s", class_name);
+      CLEAR_PENDING_EXCEPTION;
+      return;
+    }
+  }
+}
+
+// class_handle - the class name, bytes_handle - the class bytes
+void LambdaFormInvokers::reload_class(char* name, ClassFileStream& st, TRAPS) {
+  Symbol* class_name = SymbolTable::new_symbol((const char*)name);
+  // the class must exist
+  Klass* klass = SystemDictionary::resolve_or_null(class_name, THREAD);
+  if (klass == NULL) {
+    log_info(cds)("Class %s not present, skip", name);
+    return;
+  }
+  assert(klass->is_instance_klass(), "Should be");
+
+  ClassLoaderData* cld = ClassLoaderData::the_null_class_loader_data();
+  Handle protection_domain;
+  ClassLoadInfo cl_info(protection_domain);
+
+  InstanceKlass* result = KlassFactory::create_from_stream(&st,
+                                                   class_name,
+                                                   cld,
+                                                   cl_info,
+                                                   false,
+                                                   CHECK);
+
+  {
+    MutexLocker mu_r(THREAD, Compile_lock); // add_to_hierarchy asserts this.
+    SystemDictionary::add_to_hierarchy(result);
+  }
+  // new class not linked yet.
+  MetaspaceShared::try_link_class(THREAD, result);
+  assert(!HAS_PENDING_EXCEPTION, "Invariant");
+
+  // exclude the existing class from dump
+  SystemDictionaryShared::set_excluded(InstanceKlass::cast(klass));
+  log_info(cds, lambda)("Replaced class %s, old: %p  new: %p", name, klass, result);
+}
diff --git a/src/hotspot/share/classfile/systemDictionary.cpp b/src/hotspot/share/classfile/systemDictionary.cpp
index 98e2541c79b..63de2e2f099 100644
--- a/src/hotspot/share/classfile/systemDictionary.cpp
+++ b/src/hotspot/share/classfile/systemDictionary.cpp
@@ -963,11 +963,12 @@ InstanceKlass* SystemDictionary::resolve_from_stream(ClassFileStream* st,
                                                      Symbol* class_name,
                                                      Handle class_loader,
                                                      const ClassLoadInfo& cl_info,
+                                                     InstanceKlass* old_klass,
                                                      TRAPS) {
   if (cl_info.is_hidden()) {
-    return resolve_hidden_class_from_stream(st, class_name, class_loader, cl_info, CHECK_NULL);
+    return resolve_hidden_class_from_stream(st, class_name, class_loader, cl_info, old_klass, CHECK_NULL);
   } else {
-    return resolve_class_from_stream(st, class_name, class_loader, cl_info, CHECK_NULL);
+    return resolve_class_from_stream(st, class_name, class_loader, cl_info, old_klass, CHECK_NULL);
   }
 }
 
diff --git a/src/hotspot/share/classfile/systemDictionary.hpp b/src/hotspot/share/classfile/systemDictionary.hpp
index 0c774dfeb51..65185a29b10 100644
--- a/src/hotspot/share/classfile/systemDictionary.hpp
+++ b/src/hotspot/share/classfile/systemDictionary.hpp
@@ -124,6 +124,7 @@ class SystemDictionary : AllStatic {
                                                          Symbol* class_name,
                                                          Handle class_loader,
                                                          const ClassLoadInfo& cl_info,
+                                                         InstanceKlass* old_klass,
                                                          TRAPS);
 
   // Resolve a class from stream (called by jni_DefineClass and JVM_DefineClass)
@@ -132,6 +133,7 @@ class SystemDictionary : AllStatic {
                                                   Symbol* class_name,
                                                   Handle class_loader,
                                                   const ClassLoadInfo& cl_info,
+                                                  InstanceKlass* old_klass,
                                                   TRAPS);
 
  public:
@@ -203,6 +205,10 @@ class SystemDictionary : AllStatic {
   // Initialization
   static void initialize(TRAPS);
 
+  // (DCEVM) Enhanced class redefinition
+  static void remove_from_hierarchy(InstanceKlass* k);
+  static void update_constraints_after_redefinition();
+
 protected:
   // Returns the class loader data to be used when looking up/updating the
   // system dictionary.
diff --git a/src/hotspot/share/classfile/vmClassMacros.hpp b/src/hotspot/share/classfile/vmClassMacros.hpp
index a4f55641b51..fb205721a39 100644
--- a/src/hotspot/share/classfile/vmClassMacros.hpp
+++ b/src/hotspot/share/classfile/vmClassMacros.hpp
@@ -109,6 +109,8 @@
                                                                                                                 \
   /* support for dynamic typing; it's OK if these are NULL in earlier JDKs */                                   \
   do_klass(DirectMethodHandle_klass,                    java_lang_invoke_DirectMethodHandle                   ) \
+  do_klass(DirectMethodHandle_StaticAccessor_klass,     java_lang_invoke_DirectMethodHandle_StaticAccessor    ) \
+  do_klass(DirectMethodHandle_Accessor_klass,           java_lang_invoke_DirectMethodHandle_Accessor          ) \
   do_klass(MethodHandle_klass,                          java_lang_invoke_MethodHandle                         ) \
   do_klass(VarHandle_klass,                             java_lang_invoke_VarHandle                            ) \
   do_klass(MemberName_klass,                            java_lang_invoke_MemberName                           ) \
diff --git a/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp b/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp
index 54edc9dffb5..058dea90828 100644
--- a/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp
+++ b/src/hotspot/share/gc/g1/g1FullGCCompactTask.cpp
@@ -141,7 +141,10 @@ void G1FullGCCompactTask::compact_region_dcevm(HeapRegion* hr, GrowableArray<Hea
   // Once all objects have been moved the liveness information
   // needs be cleared.
   collector()->mark_bitmap()->clear_region(hr);
-  hr->complete_compaction();
+  if (G1VerifyBitmaps) {
+    collector()->mark_bitmap()->clear_region(hr);
+  }
+  hr->reset_compacted_after_full_gc();
 }
 
 void G1FullGCCompactTask::serial_compaction_dcevm() {
@@ -184,13 +187,13 @@ size_t G1FullGCCompactTask::G1CompactRegionClosureDcevm::apply(oop obj) {
     } else {
       DcevmSharedGC::update_fields(obj, oop(destination));
     }
-    oop(destination)->init_mark_raw();
+    oop(destination)->init_mark();
     assert(oop(destination)->klass() != NULL, "should have a class");
     return size;
   }
 
   Copy::aligned_conjoint_words(obj_addr, destination, size);
-  oop(destination)->init_mark_raw();
+  oop(destination)->init_mark();
   assert(oop(destination)->klass() != NULL, "should have a class");
 
   return size;
diff --git a/src/hotspot/share/gc/g1/g1FullGCCompactionPoint.cpp b/src/hotspot/share/gc/g1/g1FullGCCompactionPoint.cpp
index 71a46b88f9e..87b1977128a 100644
--- a/src/hotspot/share/gc/g1/g1FullGCCompactionPoint.cpp
+++ b/src/hotspot/share/gc/g1/g1FullGCCompactionPoint.cpp
@@ -36,8 +36,8 @@ G1FullGCCompactionPoint::G1FullGCCompactionPoint() :
 {
   _compaction_regions = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapRegion*>(32, mtGC);
   _compaction_region_iterator = _compaction_regions->begin();
-  _rescued_oops = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapWord*>(128, true, mtGC);
-  _rescued_oops_values = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapWord*>(128, true, mtGC);
+  _rescued_oops = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapWord*>(128, mtGC);
+  _rescued_oops_values = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapWord*>(128, mtGC);
 }
 
 G1FullGCCompactionPoint::~G1FullGCCompactionPoint() {
@@ -180,15 +180,15 @@ void G1FullGCCompactionPoint::forward_dcevm(oop object, size_t size, bool force_
       // with BiasedLocking, in this case forwardee() will return NULL
       // even if the mark-word is used. This is no problem since
       // forwardee() will return NULL in the compaction phase as well.
-      object->init_mark_raw();
+      object->init_mark();
     } else {
       // Make sure object has the correct mark-word set or that it will be
       // fixed when restoring the preserved marks.
-      assert(object->mark_raw() == markWord::prototype_for_klass(object->klass()) || // Correct mark
+      assert(object->mark() == markWord::prototype_for_klass(object->klass()) || // Correct mark
              object->mark_must_be_preserved() || // Will be restored by PreservedMarksSet
-             (UseBiasedLocking && object->has_bias_pattern_raw()), // Will be restored by BiasedLocking
+             (UseBiasedLocking && object->has_bias_pattern()), // Will be restored by BiasedLocking
              "should have correct prototype obj: " PTR_FORMAT " mark: " PTR_FORMAT " prototype: " PTR_FORMAT,
-             p2i(object), object->mark_raw().value(), markWord::prototype_for_klass(object->klass()).value());
+             p2i(object), object->mark().value(), markWord::prototype_for_klass(object->klass()).value());
     }
     assert(object->forwardee() == NULL, "should be forwarded to NULL");
   }
diff --git a/src/hotspot/share/gc/shared/dcevmSharedGC.cpp b/src/hotspot/share/gc/shared/dcevmSharedGC.cpp
index 3dee097f1d3..edc19a3077d 100644
--- a/src/hotspot/share/gc/shared/dcevmSharedGC.cpp
+++ b/src/hotspot/share/gc/shared/dcevmSharedGC.cpp
@@ -64,7 +64,7 @@ void DcevmSharedGC::copy_rescued_objects_back(GrowableArray<HeapWord*>* rescued_
         Copy::aligned_disjoint_words(cast_from_oop<HeapWord*>(rescued_obj), cast_from_oop<HeapWord*>(new_obj), size);
       }
 
-      new_obj->init_mark_raw();
+      new_obj->init_mark();
       assert(oopDesc::is_oop(new_obj), "must be a valid oop");
     }
   }
diff --git a/src/hotspot/share/gc/shared/space.inline.hpp b/src/hotspot/share/gc/shared/space.inline.hpp
index e3a37280268..cafa2503ef4 100644
--- a/src/hotspot/share/gc/shared/space.inline.hpp
+++ b/src/hotspot/share/gc/shared/space.inline.hpp
@@ -371,7 +371,7 @@ inline void CompactibleSpace::scan_and_compact(SpaceType* space, bool redefiniti
         } else {
           DcevmSharedGC::update_fields(oop(cur_obj), oop(compaction_top));
         }
-        oop(compaction_top)->init_mark_raw();
+        oop(compaction_top)->init_mark();
         assert(oop(compaction_top)->klass() != NULL, "should have a class");
 
         debug_only(prev_obj = cur_obj);
diff --git a/src/hotspot/share/memory/universe.cpp b/src/hotspot/share/memory/universe.cpp
index 247f2b3e8c0..4ae3b382b67 100644
--- a/src/hotspot/share/memory/universe.cpp
+++ b/src/hotspot/share/memory/universe.cpp
@@ -44,8 +44,6 @@
 #include "gc/shared/oopStorageSet.hpp"
 #include "gc/shared/stringdedup/stringDedup.hpp"
 #include "gc/shared/tlab_globals.hpp"
-#include "gc/shared/weakProcessor.hpp"
-#include "interpreter/interpreter.hpp"
 #include "logging/log.hpp"
 #include "logging/logStream.hpp"
 #include "memory/metadataFactory.hpp"
@@ -73,8 +71,6 @@
 #include "runtime/jniHandles.hpp"
 #include "runtime/thread.inline.hpp"
 #include "runtime/timerTrace.hpp"
-#include "runtime/vmOperations.hpp"
-#include "services/management.hpp"
 #include "services/memoryService.hpp"
 #include "utilities/align.hpp"
 #include "utilities/autoRestore.hpp"
@@ -208,73 +204,6 @@ void Universe::basic_type_classes_do(KlassClosure *closure) {
   }
 }
 
-#define DO_PRIMITIVE_MIRROR(m) \
-  f->do_oop((oop*) &m);
-
-// FIXME: (DCEVM) This method should iterate all pointers that are not within heap objects.
-void Universe::root_oops_do(OopClosure *oopClosure) {
-  Universe::oops_do(oopClosure);
-//  ReferenceProcessor::oops_do(oopClosure); (tw) check why no longer there
-  JNIHandles::oops_do(oopClosure);   // Global (strong) JNI handles
-  Threads::oops_do(oopClosure, NULL);
-  ObjectSynchronizer::oops_do(oopClosure);
-  // (DCEVM) TODO: Check if this is correct?
-  Management::oops_do(oopClosure);
-  OopStorageSet::vm_global()->oops_do(oopClosure);
-  // CLDToOopClosure cld_closure(oopClosure, ClassLoaderData::_claim_none);
-  // ClassLoaderDataGraph::cld_do(&cld_closure);
-
-  // Now adjust pointers in remaining weak roots.  (All of which should
-  // have been cleared if they pointed to non-surviving objects.)
-  // Global (weak) JNI handles
-  WeakProcessor::oops_do(oopClosure);
-
-  JvmtiExport::oops_do(oopClosure);
-
-  CodeBlobToOopClosure blobClosure(oopClosure, CodeBlobToOopClosure::FixRelocations);
-  CodeCache::blobs_do(&blobClosure);
-  
-  AOT_ONLY(AOTLoader::oops_do(oopClosure);)
-  
-  // StringTable::oops_do was removed in j15
-  // StringTable::oops_do(oopClosure);
-
-  // OopStorageSet::vm_global()->oops_do(oopClosure);
-
-}
-
-void Universe::oops_do(OopClosure* f) {
-  PRIMITIVE_MIRRORS_DO(DO_PRIMITIVE_MIRROR);
-
-  for (int i = T_BOOLEAN; i < T_VOID+1; i++) {
-    f->do_oop((oop*) &_mirrors[i]);
-  }
-  assert(_mirrors[0] == NULL && _mirrors[T_BOOLEAN - 1] == NULL, "checking");
-
-  f->do_oop((oop*)&_the_empty_class_array);
-  f->do_oop((oop*)&_the_null_sentinel);
-  f->do_oop((oop*)&_the_null_string);
-  f->do_oop((oop*)&_the_min_jint_string);
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_java_heap));
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_c_heap));
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_metaspace));
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_class_metaspace));
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_array_size));
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_gc_overhead_limit));
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_realloc_objects));
-  f->do_oop((oop*)&out_of_memory_errors()->obj_at(_oom_retry));
-  f->do_oop((oop*)&_delayed_stack_overflow_error_message);
-  f->do_oop((oop*)&_preallocated_out_of_memory_error_array);
-  f->do_oop((oop*)&_null_ptr_exception_instance);
-  f->do_oop((oop*)&_arithmetic_exception_instance);
-  f->do_oop((oop*)&_virtual_machine_error_instance);
-  f->do_oop((oop*)&_main_thread_group);
-  f->do_oop((oop*)&_system_thread_group);
-  f->do_oop((oop*)&_reference_pending_list);
-  debug_only(f->do_oop((oop*)&_fullgc_alot_dummy_array);)
-  ThreadsSMRSupport::exiting_threads_oops_do(f);
-}
-
 void LatestMethodCache::metaspace_pointers_do(MetaspaceClosure* it) {
   it->push(&_klass);
 }
diff --git a/src/hotspot/share/memory/universe.hpp b/src/hotspot/share/memory/universe.hpp
index cb320076a55..4b2211c415e 100644
--- a/src/hotspot/share/memory/universe.hpp
+++ b/src/hotspot/share/memory/universe.hpp
@@ -326,13 +326,6 @@ class Universe: AllStatic {
   static bool        should_fill_in_stack_trace(Handle throwable);
   static void check_alignment(uintx size, uintx alignment, const char* name);
 
-  // Iteration
-
-  static void root_oops_do(OopClosure *oopClosure); // FIXME: kill...
-  // Apply "f" to the addresses of all the direct heap pointers maintained
-  // as static fields of "Universe".
-  static void oops_do(OopClosure* f);
-
   // CDS support
   static void serialize(SerializeClosure* f);
 
diff --git a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
index b4d09e92830..c2de2bec7d4 100644
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -1286,7 +1286,7 @@ void InstanceKlass::init_implementor() {
 // (DCEVM) - init_implementor() for dcevm
 void InstanceKlass::init_implementor_from_redefine() {
   assert(is_interface(), "not interface");
-  Klass* volatile* addr = adr_implementor();
+  InstanceKlass* volatile* addr = adr_implementor();
   assert(addr != NULL, "null addr");
   if (addr != NULL) {
     *addr = NULL;
@@ -3816,7 +3816,7 @@ void InstanceKlass::verify_on(outputStream* st) {
 
     guarantee(sib->is_klass(), "should be klass");
     // TODO: (DCEVM) explain
-    guarantee(sib->super() == super || AllowEnhancedClassRedefinition && super->newest_version() == SystemDictionary::Object_klass(), "siblings should have same superklass");
+    guarantee(sib->super() == super || AllowEnhancedClassRedefinition && super->newest_version() == vmClasses::Object_klass(), "siblings should have same superklass");
   }
 
   // Verify local interfaces
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index 2a7dd35bdd1..071dbc6d6ad 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -26,8 +26,10 @@
 #include "aot/aotLoader.hpp"
 #include "classfile/classFileParser.hpp"
 #include "classfile/classFileStream.hpp"
+#include "classfile/classLoadInfo.hpp"
 #include "classfile/metadataOnStackMark.hpp"
 #include "classfile/systemDictionary.hpp"
+#include "classfile/symbolTable.hpp"
 #include "classfile/verifier.hpp"
 #include "classfile/dictionary.hpp"
 #include "classfile/classLoaderDataGraph.hpp"
@@ -198,8 +200,8 @@ class FieldCopier : public FieldClosure {
     if (found && result.is_static()) {
       log_trace(redefine, class, obsolete, metadata)("Copying static field value for field %s old_offset=%d new_offset=%d",
                                                fd->name()->as_C_string(), result.offset(), fd->offset());
-      memcpy(cur_oop->obj_field_addr_raw<HeapWord>(fd->offset()),
-             old_oop->obj_field_addr_raw<HeapWord>(result.offset()),
+      memcpy(cur_oop->obj_field_addr<HeapWord>(fd->offset()),
+             old_oop->obj_field_addr<HeapWord>(result.offset()),
              type2aelembytes(fd->field_type()));
 
       // Static fields may have references to java.lang.Class
@@ -242,6 +244,17 @@ void VM_EnhancedRedefineClasses::register_nmethod_g1(nmethod* nm) {
   }
 }
 
+void VM_EnhancedRedefineClasses::root_oops_do(OopClosure *oopClosure) {
+  Universe::vm_global()->oops_do(oopClosure);
+
+  Threads::oops_do(oopClosure, NULL);
+  AOT_ONLY(AOTLoader::oops_do(oopClosure);)
+  OopStorageSet::strong_oops_do(oopClosure);
+
+  CodeBlobToOopClosure blobClosure(oopClosure, CodeBlobToOopClosure::FixRelocations);
+  CodeCache::blobs_do(&blobClosure);
+}
+
 // TODO comment
 struct StoreBarrier {
   // TODO: j10 review change ::oop_store -> HeapAccess<>::oop_store
@@ -558,7 +571,7 @@ void VM_EnhancedRedefineClasses::doit() {
       _timer_heap_iterate.stop();
     }
 
-    Universe::root_oops_do(&oopClosureNoBarrier);
+    root_oops_do(&oopClosureNoBarrier);
 
     if (UseG1GC) {
       // this should work also for other GCs
@@ -737,8 +750,8 @@ bool VM_EnhancedRedefineClasses::is_modifiable_class(oop klass_mirror) {
 //  - link new classes
 jvmtiError VM_EnhancedRedefineClasses::load_new_class_versions(TRAPS) {
 
-  _affected_klasses = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<Klass*>(_class_count, true);
-  _new_classes = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<InstanceKlass*>(_class_count, true);
+  _affected_klasses = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<Klass*>(_class_count);
+  _new_classes = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<InstanceKlass*>(_class_count);
 
   ResourceMark rm(THREAD);
 
@@ -832,12 +845,12 @@ jvmtiError VM_EnhancedRedefineClasses::load_new_class_versions(TRAPS) {
                             !the_class->is_non_strong_hidden(),    // is_strong_hidden
                             true);    // FIXME: check if correct. can_access_vm_annotations
 
-      k = SystemDictionary::parse_stream(the_class_sym,
-                                         the_class_loader,
-                                         &st,
-                                         cl_info,
-                                         the_class,
-                                         THREAD);
+      k = SystemDictionary::resolve_from_stream(&st,
+                                                the_class_sym,
+                                                the_class_loader,
+                                                cl_info,
+                                                the_class,
+                                                THREAD);
 
       k->class_loader_data()->exchange_holders(the_class->class_loader_data());
 
@@ -853,12 +866,12 @@ jvmtiError VM_EnhancedRedefineClasses::load_new_class_versions(TRAPS) {
       }
 
     } else {
-      k = SystemDictionary::resolve_from_stream(the_class_sym,
-                                                  the_class_loader,
-                                                  protection_domain,
-                                                  &st,
-                                                  the_class,
-                                                  THREAD);
+      k = SystemDictionary::resolve_from_stream(&st,
+                                                the_class_sym,
+                                                the_class_loader,
+                                                protection_domain,
+                                                the_class,
+                                                THREAD);
     }
     // Clear class_being_redefined just to be sure.
     state->clear_class_being_redefined();
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
index 5de375fb888..9be70039e32 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.hpp
@@ -124,6 +124,8 @@ class VM_EnhancedRedefineClasses: public VM_GC_Operation {
   static void register_nmethod_g1(nmethod* nm);
   static void unpatch_bytecode(Method* method, TRAPS);
 
+  void root_oops_do(OopClosure *oopClosure);
+
   // Figure out which new methods match old methods in name and signature,
   // which methods have been added, and which are no longer present
   void compute_added_deleted_matching_methods();
diff --git a/src/hotspot/share/prims/resolvedMethodTable.cpp b/src/hotspot/share/prims/resolvedMethodTable.cpp
index 3c29eda4da0..a1eadc2958a 100644
--- a/src/hotspot/share/prims/resolvedMethodTable.cpp
+++ b/src/hotspot/share/prims/resolvedMethodTable.cpp
@@ -34,6 +34,7 @@
 #include "oops/access.inline.hpp"
 #include "oops/method.hpp"
 #include "oops/oop.inline.hpp"
+#include "oops/klass.inline.hpp"
 #include "oops/weakHandle.inline.hpp"
 #include "prims/resolvedMethodTable.hpp"
 #include "runtime/atomic.hpp"
@@ -375,7 +376,7 @@ class AdjustMethodEntriesDcevm : public StackObj {
   GrowableArray<oop>* _oops_to_add;
 public:
   AdjustMethodEntriesDcevm(GrowableArray<oop>* oops_to_add, bool* trace_name_printed) : _trace_name_printed(trace_name_printed), _oops_to_add(oops_to_add) {};
-  bool operator()(WeakHandle<vm_resolved_method_table_data>* entry) {
+  bool operator()(WeakHandle* entry) {
     oop mem_name = entry->peek();
     if (mem_name == NULL) {
       // Removed
@@ -460,7 +461,7 @@ void ResolvedMethodTable::adjust_method_entries_dcevm(bool * trace_name_printed)
       if (_local_table->get(thread, lookup, rmg)) {
         break;
       }
-      WeakHandle<vm_resolved_method_table_data> wh = WeakHandle<vm_resolved_method_table_data>::create(Handle(thread, mem_name));
+      WeakHandle wh(_oop_storage, mem_name);
       // The hash table takes ownership of the WeakHandle, even if it's not inserted.
       if (_local_table->insert(thread, lookup, wh)) {
         log_insert(method);
diff --git a/src/hotspot/share/runtime/arguments.hpp b/src/hotspot/share/runtime/arguments.hpp
index 1b7f8fe9f47..6a8ceb7fa8a 100644
--- a/src/hotspot/share/runtime/arguments.hpp
+++ b/src/hotspot/share/runtime/arguments.hpp
@@ -482,6 +482,8 @@ class Arguments : AllStatic {
   // Adjusts the arguments after the OS have adjusted the arguments
   static jint adjust_after_os();
 
+  // Check for consistency in the selection of the garbage collector.
+  static bool check_gc_consistency();        // Check user-selected gc
   // Check consistency or otherwise of VM argument settings
   static bool check_vm_args_consistency();
   // Used by os_solaris
-- 
2.23.0

