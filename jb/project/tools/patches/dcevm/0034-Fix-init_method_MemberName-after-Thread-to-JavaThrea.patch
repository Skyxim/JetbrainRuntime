From db2d7cd0cd956f297c58baa7500c1440092648bf Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <vladimir.dvorak@jetbrains.com>
Date: Sun, 20 Jun 2021 19:42:51 +0200
Subject: [PATCH 34/39] Fix init_method_MemberName after Thread to JavaThread
 refactorization

---
 src/hotspot/share/interpreter/linkResolver.cpp    | 14 ++++++++++----
 src/hotspot/share/interpreter/linkResolver.hpp    |  3 ++-
 src/hotspot/share/oops/instanceKlass.cpp          | 15 ---------------
 src/hotspot/share/oops/instanceKlass.hpp          |  1 -
 .../share/prims/jvmtiEnhancedRedefineClasses.cpp  | 11 +++++++++--
 5 files changed, 21 insertions(+), 23 deletions(-)

diff --git a/src/hotspot/share/interpreter/linkResolver.cpp b/src/hotspot/share/interpreter/linkResolver.cpp
index 74a6af13ea4..78c9624a18b 100644
--- a/src/hotspot/share/interpreter/linkResolver.cpp
+++ b/src/hotspot/share/interpreter/linkResolver.cpp
@@ -131,14 +131,14 @@ void CallInfo::set_common(Klass* resolved_klass,
 }
 
 // utility query for unreflecting a method
-CallInfo::CallInfo(Method* resolved_method, Klass* resolved_klass, TRAPS) {
+CallInfo::CallInfo(Method* resolved_method, Klass* resolved_klass, Thread* thread) {
   Klass* resolved_method_holder = resolved_method->method_holder();
   if (resolved_klass == NULL) { // 2nd argument defaults to holder of 1st
     resolved_klass = resolved_method_holder;
   }
   _resolved_klass  = resolved_klass;
-  _resolved_method = methodHandle(THREAD, resolved_method);
-  _selected_method = methodHandle(THREAD, resolved_method);
+  _resolved_method = methodHandle(thread, resolved_method);
+  _selected_method = methodHandle(thread, resolved_method);
   // classify:
   CallKind kind = CallInfo::unknown_kind;
   int index = resolved_method->vtable_index();
@@ -179,7 +179,9 @@ CallInfo::CallInfo(Method* resolved_method, Klass* resolved_klass, TRAPS) {
   _call_index = index;
   _resolved_appendix = Handle();
   // Find or create a ResolvedMethod instance for this Method*
-  set_resolved_method_name(CHECK);
+  if (thread->is_Java_thread()) { // exclude DCEVM VM thread
+    set_resolved_method_name(thread->as_Java_thread());
+  }
 
   DEBUG_ONLY(verify());
 }
@@ -190,6 +192,10 @@ void CallInfo::set_resolved_method_name(TRAPS) {
   _resolved_method_name = Handle(THREAD, rmethod_name);
 }
 
+void CallInfo::set_resolved_method_name_dcevm(oop rmethod_name, Thread* thread) {
+  _resolved_method_name = Handle(thread, rmethod_name);
+}
+
 #ifdef ASSERT
 void CallInfo::verify() {
   switch (call_kind()) {  // the meaning and allowed value of index depends on kind
diff --git a/src/hotspot/share/interpreter/linkResolver.hpp b/src/hotspot/share/interpreter/linkResolver.hpp
index 9eeb10cc6fd..871eaab7464 100644
--- a/src/hotspot/share/interpreter/linkResolver.hpp
+++ b/src/hotspot/share/interpreter/linkResolver.hpp
@@ -91,7 +91,7 @@ class CallInfo : public StackObj {
   // utility to extract an effective CallInfo from a method and an optional receiver limit
   // does not queue the method for compilation.  This also creates a ResolvedMethodName
   // object for the resolved_method.
-  CallInfo(Method* resolved_method, Klass* resolved_klass, TRAPS);
+  CallInfo(Method* resolved_method, Klass* resolved_klass, Thread* thread);
 
   Klass*  resolved_klass() const                 { return _resolved_klass; }
   Method* resolved_method() const                { return _resolved_method(); }
@@ -100,6 +100,7 @@ class CallInfo : public StackObj {
   Handle       resolved_method_name() const      { return _resolved_method_name; }
   // Materialize a java.lang.invoke.ResolvedMethodName for this resolved_method
   void     set_resolved_method_name(TRAPS);
+  void     set_resolved_method_name_dcevm(oop rmethod_name, Thread* thread);
 
   BasicType    result_type() const               { return selected_method()->result_type(); }
   CallKind     call_kind() const                 { return _call_kind; }
diff --git a/src/hotspot/share/oops/instanceKlass.cpp b/src/hotspot/share/oops/instanceKlass.cpp
index c54b6b1bf46..8d259451032 100644
--- a/src/hotspot/share/oops/instanceKlass.cpp
+++ b/src/hotspot/share/oops/instanceKlass.cpp
@@ -1643,21 +1643,6 @@ void InstanceKlass::methods_do(void f(Method* method)) {
   }
 }
 
-void InstanceKlass::methods_do(void f(Method* method, TRAPS), TRAPS) {
-  // Methods aren't stable until they are loaded.  This can be read outside
-  // a lock through the ClassLoaderData for profiling
-  if (!is_loaded()) {
-    return;
-  }
-
-  int len = methods()->length();
-  for (int index = 0; index < len; index++) {
-    Method* m = methods()->at(index);
-    assert(m->is_method(), "must be method");
-    f(m, CHECK);
-  }
-}
-
 //  (DCEVM) Update information contains mapping of fields from old class to the new class.
 //  Info is stored on HEAP, you need to call clear_update_information to free the space.
 void InstanceKlass::store_update_information(GrowableArray<int> &values) {
diff --git a/src/hotspot/share/oops/instanceKlass.hpp b/src/hotspot/share/oops/instanceKlass.hpp
index 317a006a4ec..36587031fec 100644
--- a/src/hotspot/share/oops/instanceKlass.hpp
+++ b/src/hotspot/share/oops/instanceKlass.hpp
@@ -1017,7 +1017,6 @@ public:
   void clear_update_information();
 
   void methods_do(void f(Method* method));
-  void methods_do(void f(Method* method, TRAPS), TRAPS);
   void array_klasses_do(void f(Klass* k));
   void array_klasses_do(void f(Klass* k, TRAPS), TRAPS);
 
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index b662976afcb..ff012383872 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -292,8 +292,15 @@ class ChangePointersOopClosure : public BasicOopIterateClosure {
           // Note: we might set NULL at this point, which should force AbstractMethodError at runtime
           Thread *thread = Thread::current();
           CallInfo info(new_method, newest, thread);
-          Handle objHandle(thread, obj);
-          MethodHandles::init_method_MemberName(objHandle, info);
+          oop resolved_method = ResolvedMethodTable::find_method(info.resolved_method());
+          if (resolved_method != NULL) {
+            info.set_resolved_method_name_dcevm(resolved_method, thread);
+            Handle objHandle(thread, obj);
+            MethodHandles::init_method_MemberName(objHandle, info);
+          } else {
+            assert(0, "Must be resolved");
+            java_lang_invoke_MemberName::set_method(obj, NULL);
+          }
         } else {
           java_lang_invoke_MemberName::set_method(obj, NULL);
         }
-- 
2.23.0

