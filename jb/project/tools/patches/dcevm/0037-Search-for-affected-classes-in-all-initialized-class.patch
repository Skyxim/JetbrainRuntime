From 563e06d1c56cfc3f4e93e3975cd6c2dab8183c98 Mon Sep 17 00:00:00 2001
From: Vladimir Dvorak <vladimir.dvorak@jetbrains.com>
Date: Wed, 30 Jun 2021 18:50:38 +0200
Subject: [PATCH 37/39] Search for affected classes in all initialized classes
 in cld

Fix also case when lambda interface is redefined. Lambda class is
missing in cld dictionary since it is hidden since j17
---
 src/hotspot/share/classfile/classLoaderData.cpp     | 10 ++++++++++
 src/hotspot/share/classfile/classLoaderData.hpp     |  1 +
 .../share/classfile/classLoaderDataGraph.cpp        | 11 ++++-------
 .../share/classfile/classLoaderDataGraph.hpp        |  2 +-
 .../share/prims/jvmtiEnhancedRedefineClasses.cpp    | 13 ++++---------
 5 files changed, 20 insertions(+), 17 deletions(-)

diff --git a/src/hotspot/share/classfile/classLoaderData.cpp b/src/hotspot/share/classfile/classLoaderData.cpp
index 65ce4c4af8c..1c51e83e86e 100644
--- a/src/hotspot/share/classfile/classLoaderData.cpp
+++ b/src/hotspot/share/classfile/classLoaderData.cpp
@@ -337,6 +337,16 @@ void ClassLoaderData::classes_do(KlassClosure* klass_closure) {
   }
 }
 
+void ClassLoaderData::initialized_classes_do(KlassClosure* klass_closure) {
+  // Lock-free access requires load_acquire
+  for (Klass* k = Atomic::load_acquire(&_klasses); k != NULL; k = k->next_link()) {
+    if (k->is_instance_klass() && InstanceKlass::cast(k)->is_initialized()) {
+      klass_closure->do_klass(k);
+    }
+    assert(k != k->next_link(), "no loops!");
+  }
+}
+
 void ClassLoaderData::classes_do(void f(Klass * const)) {
   // Lock-free access requires load_acquire
   for (Klass* k = Atomic::load_acquire(&_klasses); k != NULL; k = k->next_link()) {
diff --git a/src/hotspot/share/classfile/classLoaderData.hpp b/src/hotspot/share/classfile/classLoaderData.hpp
index bda39f3e353..28fc9060e03 100644
--- a/src/hotspot/share/classfile/classLoaderData.hpp
+++ b/src/hotspot/share/classfile/classLoaderData.hpp
@@ -272,6 +272,7 @@ class ClassLoaderData : public CHeapObj<mtClass> {
   void oops_do(OopClosure* f, int claim_value, bool clear_modified_oops = false);
 
   void classes_do(KlassClosure* klass_closure);
+  void initialized_classes_do(KlassClosure* klass_closure);
   Klass* klasses() { return _klasses; }
 
   JNIMethodBlock* jmethod_ids() const              { return _jmethod_ids; }
diff --git a/src/hotspot/share/classfile/classLoaderDataGraph.cpp b/src/hotspot/share/classfile/classLoaderDataGraph.cpp
index aa2a6bcec6b..f2394f72dbd 100644
--- a/src/hotspot/share/classfile/classLoaderDataGraph.cpp
+++ b/src/hotspot/share/classfile/classLoaderDataGraph.cpp
@@ -361,13 +361,10 @@ void ClassLoaderDataGraph::classes_do(KlassClosure* klass_closure) {
   }
 }
 
-void ClassLoaderDataGraph::anonymous_or_hidden_classes_do(KlassClosure* klass_closure) {
-  Thread* thread = Thread::current();
-  for (ClassLoaderData* cld = _head; cld != NULL; cld = cld->next()) {
-    if (cld->has_class_mirror_holder()) {
-      Handle holder(thread, cld->holder_phantom());
-      cld->classes_do(klass_closure);
-    }
+void ClassLoaderDataGraph::initialized_classes_do(KlassClosure* klass_closure) {
+  ClassLoaderDataGraphIterator iter;
+  while (ClassLoaderData* cld = iter.get_next()) {
+    cld->initialized_classes_do(klass_closure);
   }
 }
 
diff --git a/src/hotspot/share/classfile/classLoaderDataGraph.hpp b/src/hotspot/share/classfile/classLoaderDataGraph.hpp
index da712eaf55f..ff391ec74fc 100644
--- a/src/hotspot/share/classfile/classLoaderDataGraph.hpp
+++ b/src/hotspot/share/classfile/classLoaderDataGraph.hpp
@@ -80,7 +80,7 @@ class ClassLoaderDataGraph : public AllStatic {
   static void classes_do(KlassClosure* klass_closure);
 
   // Enhanced class redefinition
-  static void anonymous_or_hidden_classes_do(KlassClosure* klass_closure);
+  static void initialized_classes_do(KlassClosure* klass_closure);
 
   static void classes_do(void f(Klass* const));
   static void methods_do(void f(Method*));
diff --git a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
index cbcb484a290..43899ea3d48 100644
--- a/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
+++ b/src/hotspot/share/prims/jvmtiEnhancedRedefineClasses.cpp
@@ -2170,17 +2170,12 @@ jvmtiError VM_EnhancedRedefineClasses::find_sorted_affected_classes(TRAPS) {
   {
     MutexLocker mcld(ClassLoaderDataGraph_lock);
 
-    // 0. we can't use ClassLoaderDataGraph::classes_do since classes can be uninitialized in cld,
-    // fully initialized class is in system dictionary
+    // We can't use ClassLoaderDataGraph::classes_do since classes can be uninitialized in cld,
+    // fully initialized class is in system dictionary, but hidden classes are excluded. Therefore
+    // we use special method iterating over initialized classes only
     // ClassLoaderDataGraph::classes_do(&closure);
 
-    // 1. Scan over dictionaries
-    ClassLoaderDataGraph::dictionary_classes_do(&closure);
-
-    // 2. Anonymous or hidden class is not in dictionary, we have to iterate anonymous cld directly, but there is race cond...
-    // TODO: review ... anonymous class is added to cld before InstanceKlass initialization,
-    //                  find out how to check if the InstanceKlass is initialized
-    ClassLoaderDataGraph::anonymous_or_hidden_classes_do(&closure);
+    ClassLoaderDataGraph::initialized_classes_do(&closure);
   }
 
   log_trace(redefine, class, load)("%d classes affected", _affected_klasses->length());
-- 
2.23.0

